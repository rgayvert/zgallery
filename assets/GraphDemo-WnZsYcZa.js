var S=Object.defineProperty;var V=(n,e,t)=>e in n?S(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var l=(n,e,t)=>(V(n,typeof e!="symbol"?e+"":e,t),t);import{V as w,a as p,P as F,l as c,aG as M,ab as y,p as m,b as h,j,B as I,ad as W,ai as x,H as z,g as P,aH as $,aI as k,aJ as v,aK as E,aL as q,f as O,G as L}from"./index-CkfRi8mc.js";import{A as C}from"./Animator-YkxGlFiu.js";class u{constructor(e,t){l(this,"adjacentVertices",new Set);this.id=e,this.data=t}toString(){return`<${this.id}>`}addEdge(e){this.adjacentVertices.add(e.vertex1===this?e.vertex2:e.vertex1)}removeEdge(e){this.adjacentVertices.delete(e.vertex1===this?e.vertex2:e.vertex1)}}function b(n,e){return n[0]===e[0]&&n[1]===e[1]||n[0]===e[1]&&n[1]===e[0]}class g{constructor(e,t,r){this.vertex1=e,this.vertex2=t,this.data=r,e.addEdge(this),t.addEdge(this)}containsVertex(e){return e===this.vertex1||e===this.vertex2}containsVertices(e,t){return b([this.vertex1.id,this.vertex2.id],[e.id,t.id])}toString(){return`[${this.vertex1.id} -> ${this.vertex2.id}]`}}class f{constructor(e,t=[],r=!1){this.vertices=e,this.edges=t,this.isDirected=r}vertexWithID(e){return this.vertices.find(t=>t.id===e)}addVertex(e){this.vertices.push(e)}addEdge(e){this.edges.push(e),e.vertex1.addEdge(e),e.vertex2.addEdge(e)}addEdgeWithIDs(e,t,r){this.addEdgeWithVertices(this.vertexWithID(e),this.vertexWithID(t))}addEdgeWithVertices(e,t,r){e&&t&&this.addEdge(new g(e,t,r))}edgeWithVertices(e,t){return this.edges.find(r=>r.containsVertex(e)&&r.containsVertex(t))}dump(){console.log("Vertices:"),this.vertices.forEach(e=>console.log(`  ${e}`)),console.log("Edges:"),this.edges.forEach(e=>console.log(`  ${e}`))}findShortestPath(e,t){const r=[],i=new Set,a=new Map,s=new Map;for(s.set(e,0),r.push(e);r.length>0;){const d=r.shift();[...d.adjacentVertices].forEach(o=>{i.has(o)||(r.push(o),i.add(o),a.has(o)||a.set(o,d),s.has(o)||s.set(o,s.get(d)+1))})}if(a.has(t)){const d=[t];let o=a.get(t);for(d.push(o);o!==e;)o=a.get(o),d.push(o);return d.reverse().map(G=>G.id)}else return[]}applyLayout(e){const t=[];this.vertices.forEach(i=>{const a=e.vertices.find(s=>s.id===i.id);if(a){const s={x:a.x,y:a.y,label:a.label,...i.data};t.push(new u(i.id,s))}});const r=new f(t);return this.edges.forEach(i=>{const a=e.edges.find(s=>b([s.vertex1,s.vertex2],[i.vertex1.id,i.vertex2.id]));if(a){const s={label:a.label,...i.data};r.addEdgeWithIDs(i.vertex1.id,i.vertex2.id,s)}}),r}}const A={size:M(200,200),gravity:1,repulsion:100,springSize:.5,stepSize:.01,iterations:300};class B{constructor(e,t={}){l(this,"vertices");l(this,"edges");l(this,"config");l(this,"iterationCount",0);this.graph=e,this.config=Object.assign({...A},t),this.vertices=e.vertices.map(r=>new u(r.id,{point:this.randomPoint(),force:w(0,0),mass:this.randomMass()})),this.edges=e.edges.map(r=>new g(this.vertices.find(i=>i.id===r.vertex1.id),this.vertices.find(i=>i.id===r.vertex2.id)))}randomPoint(){const e=this.config.size;return p(F(c.randomInt(-.45*e.x,.45*e.x),c.randomInt(-.45*e.y,.45*e.y)))}randomMass(){return c.random(2,3)}applyForces(e,t){const r=t.data.point.get().subtract(e.data.point.get()),i=r.scalarMultiply(this.config.repulsion/r.magnitudeSquared());if(e.data.force=e.data.force.subtract(i),t.data.force=t.data.force.add(i),e.adjacentVertices.has(t)){const a=r.scalarMultiply(.1);e.data.force=e.data.force.add(a),t.data.force=t.data.force.subtract(a)}}step(e){c.repeatForMillis(16,()=>this.iterateOnce()),this.iterationCount++}iterateOnce(){const e=this.vertices;e.forEach(t=>t.data.force=t.data.point.get().scalarMultiply(-this.config.gravity));for(let t=0;t<e.length;t++)for(let r=t+1;r<e.length;r++)this.applyForces(e[t],e[r]);e.forEach(t=>{t.data.point.set(t.data.point.get().add(t.data.force.scalarMultiply(.2*t.data.mass)))})}}const D={graph:(n,e,t,r)=>{const i=c.sequence(0,n).map(s=>new u(s,t?{weight:c.random(t.start,t.end)}:{})),a=new f(i);for(;a.edges.length<e;){const s=c.randomSubset(i,2);a.edgeWithVertices(s[0],s[1])||a.addEdge(new g(s[0],s[1]))}return a.vertices.forEach(s=>{if(s.adjacentVertices.size===0){const d=c.randomElementMatching(a.vertices,o=>o!==s);d&&a.addEdge(new g(s,d))}}),a},weightedVertexGraph:(n,e,t)=>D.graph(n,e,t)};function H(){const n=new B(D.graph(100,50,{start:1,end:5}),{iterations:500}),e=new C({duration:5e3});e.add(n);function t(a){const s=p(!1);return $({cx:p(()=>a.data.point.get().x),cy:p(()=>a.data.point.get().y),r:a.data.mass,fill:h.color.blue,transition:"cx 0.1s, cy: 0.1s",selected:s,draggable:!0,onDrag:d=>a.data.point.set(a.data.point.get().add(d)),onDragEnd:()=>e.start()})}function r(a,s){return k({x1:v(a),y1:E(a),x2:v(s),y2:E(s),stroke:h.color.blue,transition:"x1 0.1s, y1 0.1s, x2 0.1s, x2 0.1s"})}const i={bounds:y(-100,-100,200,200),width:m(400),height:m(400),fill:h.color.background,draggableElements:!0};return j({gap:h.space.s5}).append(I({border:h.border.thin,padding:h.space.s3}).append(W(i).append(x(n.edges,a=>`${a.vertex1.id}-${a.vertex2.id}`,a=>r(a.vertex1.data.point,a.vertex2.data.point))).append(x(n.vertices,a=>`${a.id}`,a=>t(a)))),z({gap:h.space.s3}).append(P({label:p(()=>e.isRunning?"Stop":"Start"),action:()=>e.startOrStop()})))}function R(){const n=[[10,10],[40,10],[40,30],[70,30]],e=[[0,1],[1,2],[2,3],[3,4]],t=c.sequence(0,4).map(s=>new u(s,{})),r=new f(t);e.forEach(([s,d])=>r.addEdgeWithIDs(s,d));const i={vertices:c.sequence(0,4).map(s=>({id:s,x:p(n[s][0]),y:p(n[s][1])})),edges:r.edges.map(s=>({vertex1:s.vertex1.id,vertex2:s.vertex2.id}))},a=r.applyLayout(i);return q(a,{bounds:y(0,0,100,40),border:h.border.thin,draggableElements:!0,width:O(50)})}function Q(){return L(T)}const T={sourceDir:"/source/Demos/Graphs",sections:[{title:"Simple Graph",componentFn:R,sources:["SimpleGraphExample.ts"],markdown:"SimpleGraphExample.md"},{title:"Force Directed Graph",componentFn:H,sources:["ForceDirectedGraphExample.ts"],markdown:"ForceDirectedGraphExample.md"}]};export{Q as GraphDemo,Q as default};
