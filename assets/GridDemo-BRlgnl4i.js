import{a as l,b as n,M as b,aC as u,aM as t,T as f,m as p,an as k,k as w,a7 as x,p as h,j as y,L as G,Z as L,l as m,ai as E,B as M,aN as S,G as A}from"./index-CDFdAaCC.js";function D(r,a,o,e={}){function c(){return u.instance.break(t(r.rows),t(a.rows),t(o.rows))}function s(){return u.instance.break(t(r.columns),t(a.columns),t(o.columns))}function i(){return u.instance.break(t(r.gap),t(a.gap),t(o.gap))}function g(){return u.instance.break(t(r.areas),t(a.areas),t(o.areas))}return e.templateRows=l(()=>c()||""),e.templateColumns=l(()=>s()||""),e.gap=i()||n.space.s0,e.templateAreas=l(()=>g()||""),b(e)}function v(){const r=`<h1>Main article area</h1><p>
    In this layout, we display the areas in source order for a small screen. 
    We go to a two column layout, and then to a three
    column layout by redefining the grid, and the placement of items on the grid.`,a="Link 1<br>Link 2<br>Link 3";function o(i,g){return f(g,{gridArea:i,background:n.color.background,color:n.color.primary})}const e={areas:'"header" "nav" "content" "sidebar" "ad" "footer"',gap:n.space.s1},c={areas:`
       "header  header"
       "nav     nav"
       "sidebar content"
       "ad      footer"`,columns:"1fr 3fr",gap:n.space.s1},s={areas:`
      "header header  header"
      "nav    content sidebar"
      "nav    content ad"
      "footer footer  footer"`,columns:"1fr 4fr 1fr",gap:n.space.s1};return D(e,c,s,{border:n.border.thin,background:n.color.tertiary}).append(o("header","The header"),o("content",r),o("nav",a),o("sidebar","Sidebar"),o("ad","Advertising and more"),o("footer","The footer"))}function B(){const r=[[1,2,3],[4,5,6]],a={nrows:r.length,ncolumns:Math.max(...r.map(e=>e.length)),border:n.border.thin,gap:n.space.s1,background:n.color.gray},o={width:p(6),height:p(6),background:n.color.background};return b(a).append(...r.map(e=>e.map(c=>k(o).append(w(c.toString()))).flat()).flat())}function d(r,a,o){if(a===o)return[r];if(r.r2-r.r1>r.c2-r.c1){const e=r.r1+Math.round(m.randomInt(20,80)/100*(r.r2-r.r1));return[...d({...r,r2:e},a+1,o),...d({...r,r1:e},a+1,o)]}else{const e=r.c1+Math.round(m.randomInt(20,80)/100*(r.c2-r.c1));return[...d({...r,c2:e},a+1,o),...d({...r,c1:e},a+1,o)]}}function R(){const r=[n.color.red,n.color.white,n.color.blue,n.color.yellow,n.color.green,n.color.black],a=x.instance.addAtom("mondrian","4"),o=l(()=>d({r1:1,c1:1,r2:33,c2:33},0,parseInt(a.get()))),e={nrows:32,ncolumns:32,border:n.border.thin,background:n.color.gray,gap:h(1),width:p(50),height:p(50)},c={background:n.color.background,border:n.border.thin};return y({alignItems:"center",gap:n.space.s5}).append(G("Level:").append(L(a,m.sequence(2,4).map(s=>s.toString()),{width:p(6),padding:h(0)})),b(e).append(E(o,(s,i)=>s,(s,i)=>M({...c,background:m.randomElement(r),gridArea:S(s)}))))}function C(){return A(T)}const T={sourceDir:"/source/Demos/Grid",sections:[{title:"Simple Grid",componentFn:B,sources:["SimpleGridExample.ts"],markdown:"SimpleGridExample.md"},{title:"Responsive Grid Layout",componentFn:v,sources:["ResponsiveGridLayoutExample.ts"],markdown:"ResponsiveGridLayoutExample.md"},{title:"Mondrian Grid",componentFn:R,sources:["MondrianGridExample.ts"],markdown:"MondrianGridExample.md"}]};export{C as GridLayoutDemo,C as default};
