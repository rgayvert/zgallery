var w=Object.defineProperty;var b=(i,t,e)=>t in i?w(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var h=(i,t,e)=>(b(i,typeof t!="symbol"?t+"":t,e),e);import{aK as x,v as F,a as u,g as v,k as d,ad as D,p as E,c as l,V as y,aL as G,H as M,h as W,f as j,G as k}from"./index--PxxFISQ.js";import{A as I}from"./BasicAnimator-CKzhNdMB.js";class g{constructor(t,e){h(this,"adjacentVertices",new Set);this.id=t,this.data=e}toString(){return`<${this.id}>`}addEdge(t){this.adjacentVertices.add(t.vertex1===this?t.vertex2:t.vertex1)}removeEdge(t){this.adjacentVertices.delete(t.vertex1===this?t.vertex2:t.vertex1)}}function O(i,t){return i[0]===t[0]&&i[1]===t[1]||i[0]===t[1]&&i[1]===t[0]}class p{constructor(t,e,a){this.vertex1=t,this.vertex2=e,this.data=a,t.addEdge(this),e.addEdge(this)}containsVertex(t){return t===this.vertex1||t===this.vertex2}containsVertices(t,e){return O([this.vertex1.id,this.vertex2.id],[t.id,e.id])}toString(){return`[${this.vertex1.id} -> ${this.vertex2.id}]`}}class m{constructor(t,e=[],a=!1){this.vertices=t,this.edges=e,this.isDirected=a}vertexWithID(t){return this.vertices.find(e=>e.id===t)}addVertex(t){this.vertices.push(t)}addEdge(t){this.edges.push(t),t.vertex1.addEdge(t),t.vertex2.addEdge(t)}addEdgeWithIDs(t,e,a){this.addEdgeWithVertices(this.vertexWithID(t),this.vertexWithID(e))}addEdgeWithVertices(t,e,a){t&&e&&this.addEdge(new p(t,e,a))}edgeWithVertices(t,e){return this.edges.find(a=>a.containsVertex(t)&&a.containsVertex(e))}dump(){console.log("Vertices:"),this.vertices.forEach(t=>console.log(`  ${t}`)),console.log("Edges:"),this.edges.forEach(t=>console.log(`  ${t}`))}findShortestPath(t,e){const a=[],s=new Set,r=new Map,n=new Map;for(n.set(t,0),a.push(t);a.length>0;){const c=a.shift();[...c.adjacentVertices].forEach(o=>{s.has(o)||(a.push(o),s.add(o),r.has(o)||r.set(o,c),n.has(o)||n.set(o,n.get(c)+1))})}if(r.has(e)){const c=[e];let o=r.get(e);for(c.push(o);o!==t;)o=r.get(o),c.push(o);return c.reverse().map(V=>V.id)}else return[]}}const P={size:x(200,200),gravity:1,repulsion:100,springSize:.5,stepSize:.01,iterations:300};class f extends m{constructor(e,a,s={}){super(e,a);h(this,"config");h(this,"iterationCount",0);this.config=Object.assign({...P},s)}static fromGraph(e,a){const s=a.size||x(200,200),r=e.vertices.map(c=>new g(c.id,{location:this.randomPoint(s),force:F(0,0),mass:this.randomMass()})),n=e.edges.map(c=>new p(r.find(o=>o.id===c.vertex1.id),r.find(o=>o.id===c.vertex2.id)));return new f(r,n,a)}static randomPoint(e){return u(v(d.randomInt(-.45*e.x,.45*e.x),d.randomInt(-.45*e.y,.45*e.y)))}static randomMass(){return d.random(2,3)}applyForces(e,a){const s=a.data.location.get().subtract(e.data.location.get()),r=s.scalarMultiply(this.config.repulsion/s.magnitudeSquared());if(e.data.force=e.data.force.subtract(r),a.data.force=a.data.force.add(r),e.adjacentVertices.has(a)){const n=s.scalarMultiply(.1);e.data.force=e.data.force.add(n),a.data.force=a.data.force.subtract(n)}}step(e){d.repeatForMillis(16,()=>this.iterateOnce()),this.iterationCount++}iterateOnce(){const e=this.vertices;e.forEach(a=>a.data.force=a.data.location.get().scalarMultiply(-this.config.gravity));for(let a=0;a<e.length;a++)for(let s=a+1;s<e.length;s++)this.applyForces(e[a],e[s]);e.forEach(a=>{a.data.location.set(a.data.location.get().add(a.data.force.scalarMultiply(.2*a.data.mass)))})}}const S={graph:(i,t,e,a)=>{const s=d.sequence(0,i).map(n=>new g(n,e?{weight:d.random(e.start,e.end)}:{})),r=new m(s);for(;r.edges.length<t;){const n=d.randomSubset(s,2);r.edgeWithVertices(n[0],n[1])||r.addEdge(new p(n[0],n[1]))}return r.vertices.forEach(n=>{if(n.adjacentVertices.size===0){const c=d.randomElementMatching(r.vertices,o=>o!==n);c&&r.addEdge(new p(n,c))}}),r},weightedVertexGraph:(i,t,e)=>S.graph(i,t,e)};function q(){const i=S.graph(100,50,{start:1,end:5}),t=f.fromGraph(i,{iterations:50}),e=new I({duration:5e3});e.add(t);const a={bounds:D(-100,-100,200,200),width:E(400),height:E(400),fill:l.color.background,draggableElements:!0,edgeStrokeWidth:1,vertexRadius:s=>s.data.mass,onVertexDrag:()=>e.start()};return y({gap:l.space.s5}).append(G(t,a),M({gap:l.space.s3}).append(W({label:u(()=>e.isRunning?"Stop":"Start"),action:()=>e.startOrStop()})))}function z(){const i=[[10,10],[40,10],[40,30],[70,30]],t=[[0,1],[1,2],[2,3],[3,4]],e=d.sequence(0,4).map(s=>{const r={location:u(v(i[s][0],i[s][1]))};return new g(s,r)}),a=new m(e);return t.forEach(([s,r])=>a.addEdgeWithIDs(s,r)),G(a,{bounds:D(0,0,100,40),border:l.border.thin,draggableElements:!0,width:j(50)})}function R(){return k($)}const $={sourceDir:"/source/Demos/Graphs",sections:[{title:"Simple Graph",componentFn:z,sources:["SimpleGraphExample.ts"],markdown:"SimpleGraphExample.md"},{title:"Force Directed Graph",componentFn:q,sources:["ForceDirectedGraphExample.ts"],markdown:"ForceDirectedGraphExample.md"}]};export{R as GraphDemo,R as default};
